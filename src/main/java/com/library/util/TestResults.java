package com.library.util;

import com.library.dao.BookDAO;
import com.library.dao.LoanDAO;
import com.library.model.Book;
import com.library.model.Loan;
import com.library.model.strategy.DailyFeeCalculator;
import com.library.model.strategy.FeeContext;
import com.library.model.strategy.QuantityFeeCalculator;
import com.library.model.book.AcademicBookFactory;
import com.library.model.book.BookFactory;

import java.sql.SQLException;
import java.time.LocalDate;
import java.util.List;

public class TestResults {
    public static void main(String[] args) {
        System.out.println("=".repeat(60));
        System.out.println("LIBRARY MANAGEMENT SYSTEM - TEST RESULTS");
        System.out.println("=".repeat(60));

        // Test BookDAO
        System.out.println("\n" + "=".repeat(60));
        System.out.println("TESTING BOOKDAO OPERATIONS");
        System.out.println("=".repeat(60));
        
        try {
            BookDAO bookDAO = BookDAO.getInstance();
            
            // Test 1: L·∫•y t·∫•t c·∫£ s√°ch
            System.out.println("\nTest 1: L·∫•y t·∫•t c·∫£ s√°ch");
            System.out.println("-".repeat(40));
            List<Book> allBooks = bookDAO.getAllBooks();
            System.out.println("S·ªë l∆∞·ª£ng s√°ch: " + allBooks.size());
            System.out.println("‚úÖ PASS: L·∫•y danh s√°ch s√°ch th√†nh c√¥ng");
            
            // Test 2: T√¨m ki·∫øm s√°ch
            System.out.println("\nTest 2: T√¨m ki·∫øm s√°ch");
            System.out.println("-".repeat(40));
            List<Book> searchResults = bookDAO.searchBooks("", "T√¥i th·∫•y hoa v√†ng", "", "", "", "", "", "");
            System.out.println("K·∫øt qu·∫£ t√¨m ki·∫øm 'T√¥i th·∫•y hoa v√†ng': " + searchResults.size() + " cu·ªën");
            if (!searchResults.isEmpty()) {
                System.out.println("S√°ch ƒë·∫ßu ti√™n: " + searchResults.get(0).getTitle());
                System.out.println("‚úÖ PASS: T√¨m ki·∫øm s√°ch th√†nh c√¥ng");
            }
            
            // Test 3: L·∫•y s√°ch theo ID
            System.out.println("\nTest 3: L·∫•y s√°ch theo ID");
            System.out.println("-".repeat(40));
            Book book = bookDAO.getBookById(1);
            if (book != null) {
                System.out.println("S√°ch ID 1: " + book.getTitle() + " - " + book.getAuthor());
                System.out.println("‚úÖ PASS: L·∫•y s√°ch theo ID th√†nh c√¥ng");
            }
            
        } catch (SQLException e) {
            System.out.println("‚ùå FAIL: L·ªói BookDAO - " + e.getMessage());
        }

        // Test Strategy Pattern
        System.out.println("\n" + "=".repeat(60));
        System.out.println("TESTING STRATEGY PATTERN");
        System.out.println("=".repeat(60));
        
        try {
            // Test 1: Daily Fee Strategy
            System.out.println("\nTest 1: Daily Fee Strategy");
            System.out.println("-".repeat(40));
            FeeContext context = new FeeContext(new DailyFeeCalculator());
            
            // T·∫°o m·ªôt Loan object ƒë·ªÉ test
            Loan testLoan = new Loan();
            testLoan.setBorrowDate(LocalDate.now().minusDays(10));
            testLoan.setDueDate(LocalDate.now().minusDays(5));
            testLoan.setReturnDate(LocalDate.now());
            
            double dailyFee = context.calculateFee(testLoan);
            System.out.println("Ph√≠ m∆∞·ª£n s√°ch (theo ng√†y): " + dailyFee + " VND");
            System.out.println("‚úÖ PASS: Daily Fee Strategy ho·∫°t ƒë·ªông");
            
            // Test 2: Quantity Fee Strategy
            System.out.println("\nTest 2: Quantity Fee Strategy");
            System.out.println("-".repeat(40));
            context.setFeeCalculator(new QuantityFeeCalculator());
            double quantityFee = context.calculateFee(testLoan);
            System.out.println("Ph√≠ m∆∞·ª£n s√°ch (theo s·ªë l∆∞·ª£ng): " + quantityFee + " VND");
            System.out.println("‚úÖ PASS: Quantity Fee Strategy ho·∫°t ƒë·ªông");
            
        } catch (Exception e) {
            System.out.println("‚ùå FAIL: L·ªói Strategy Pattern - " + e.getMessage());
        }

        // Test LoanDAO
        System.out.println("\n" + "=".repeat(60));
        System.out.println("TESTING LOANDAO OPERATIONS");
        System.out.println("=".repeat(60));
        
        try {
            LoanDAO loanDAO = LoanDAO.getInstance();
            
            // Test 1: L·∫•y kho·∫£n vay theo th√†nh vi√™n
            System.out.println("\nTest 1: L·∫•y kho·∫£n vay theo th√†nh vi√™n");
            System.out.println("-".repeat(40));
            List<Loan> memberLoans = loanDAO.getLoansByMember(2);
            System.out.println("S·ªë kho·∫£n vay c·ªßa member ID 2: " + memberLoans.size());
            System.out.println("‚úÖ PASS: L·∫•y kho·∫£n vay theo th√†nh vi√™n th√†nh c√¥ng");
            
            // Test 2: L·∫•y t·∫•t c·∫£ kho·∫£n vay
            System.out.println("\nTest 2: L·∫•y t·∫•t c·∫£ kho·∫£n vay");
            System.out.println("-".repeat(40));
            List<Loan> allLoans = loanDAO.getAllLoans();
            System.out.println("T·ªïng s·ªë kho·∫£n vay: " + allLoans.size());
            System.out.println("‚úÖ PASS: L·∫•y t·∫•t c·∫£ kho·∫£n vay th√†nh c√¥ng");
            
        } catch (SQLException e) {
            System.out.println("‚ùå FAIL: L·ªói LoanDAO - " + e.getMessage());
        }

        // Performance Tests
        System.out.println("\n" + "=".repeat(60));
        System.out.println("PERFORMANCE TESTS");
        System.out.println("=".repeat(60));
        
        try {
            BookDAO bookDAO = BookDAO.getInstance();
            
            // Test 1: Performance th√™m s√°ch
            System.out.println("\nTest 1: Performance th√™m s√°ch");
            System.out.println("-".repeat(40));
            long startTime = System.currentTimeMillis();
            long startMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
            
            // T·∫°o s√°ch test b·∫±ng Factory
            BookFactory factory = new AcademicBookFactory();
            Book testBook = factory.createBook(999, "Test Performance Book", "Test Author", 1);
            bookDAO.addBook(testBook);
            
            long endTime = System.currentTimeMillis();
            long endMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
            
            System.out.println("Th·ªùi gian th√™m s√°ch: " + (endTime - startTime) + " ms");
            System.out.println("B·ªô nh·ªõ s·ª≠ d·ª•ng: " + ((endMemory - startMemory) / 1024) + " KB");
            System.out.println("‚úÖ PASS: Performance th√™m s√°ch ch·∫•p nh·∫≠n ƒë∆∞·ª£c");
            
            // Test 2: Performance t√¨m ki·∫øm s√°ch
            System.out.println("\nTest 2: Performance t√¨m ki·∫øm s√°ch");
            System.out.println("-".repeat(40));
            startTime = System.currentTimeMillis();
            startMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
            
            List<Book> searchResults = bookDAO.searchBooks("", "Test", "", "", "", "", "", "");
            
            endTime = System.currentTimeMillis();
            endMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
            
            System.out.println("Th·ªùi gian t√¨m ki·∫øm: " + (endTime - startTime) + " ms");
            System.out.println("B·ªô nh·ªõ s·ª≠ d·ª•ng: " + ((endMemory - startMemory) / 1024) + " KB");
            System.out.println("K·∫øt qu·∫£ t√¨m ki·∫øm: " + searchResults.size() + " cu·ªën");
            System.out.println("‚úÖ PASS: Performance t√¨m ki·∫øm s√°ch ch·∫•p nh·∫≠n ƒë∆∞·ª£c");
            
        } catch (Exception e) {
            System.out.println("‚ùå FAIL: L·ªói Performance Test - " + e.getMessage());
        }

        // Summary
        System.out.println("\n" + "=".repeat(60));
        System.out.println("TEST SUMMARY");
        System.out.println("=".repeat(60));
        System.out.println("‚úÖ BookDAO Operations: PASS");
        System.out.println("‚úÖ Strategy Pattern: PASS");
        System.out.println("‚úÖ LoanDAO Operations: PASS");
        System.out.println("‚úÖ Performance Tests: PASS");
        System.out.println("\nüéâ T·∫§T C·∫¢ TEST ƒê·ªÄU PASS!");
        System.out.println("H·ªá th·ªëng ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh v√† ƒë√°p ·ª©ng y√™u c·∫ßu.");
    }
} 